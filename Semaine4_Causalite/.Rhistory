dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
dhs_ipv <- read_csv("dhs_ipv.csv")
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
nolegend()
library(tidyverse)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
ggplot(dhs_ipv) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "dodge") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
nolegend()
ggplot(dhs_ipv) +
geom_boxplot(aes(x = no_media_cat, y = beat_burnfood, color = no_media_cat)) +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("% qui estime qu'une femme doit être battue (beat_burnfood)") +
theme_bw(nolegend)
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
resume
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
summary()
summary(resume)
freq(resume$sex)
library(summarytools)
freq(resume$sex)
freq(resume$race)
freq(resume$call)
race_call_tab <-
resume %>%
group_by(race, call) %>%
count()
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = sum(call) / n)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100), 2) %>%
subset(call == 1)
race_call_tab
mutate(Prop = round(sum(call)/n*100, 2) %>%
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
group_by(race)
race_call_tab <-
resume %>%
group_by(race, call) %>%
count() %>%
group_by(race) %>%
mutate(Prop = round(sum(call)/n*100, 2)) %>%
subset(call == 1)
race_call_tab
ctable(resume, race, call)
ctable(resume$race, resume$call)
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
getwd()
getwd()
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
head(dhs_ipv)
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
freq(resume$sex)
library(summarytools)
freq(resume$race)
freq(resume$call)
ctable(resume$race, resume$call)
ctable(resume$race, resume$sex)
knitr::include_graphics("confounding.jpg")
knitr::include_graphics("cross-sectional.jpg")
knitr::include_graphics("cross-sectional.jpg")
knitr::include_graphics("cross_sectional.jpg")
knitr::include_graphics("Before-After.jpg")
knitr::include_graphics("Double-difference.jpg")
knitr::include_graphics("Double-differences.jpg")
knitr::include_graphics("Double_difference.jpg")
knitr::include_graphics("minimum-wage.jpg")
library("tidyverse")
library("qss")
data("minwage", package = "qss")
write.csv(minwage, file = "minwage.csv")
minwage
summary(minwage)
# View(minwage)
dim(minwage)          # give you the sample size and the number of variables
glimpse(minwage)
View(minwage)
data("minwage", package = "qss")
glimpse(minwage)
data("minwage", package = "qss")
head(minwage)
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
library("tidyverse")
library("qss")
data("minwage", package = "qss")
write.csv(minwage, file = "minwage.csv")
minwage
summary(minwage)
# View(minwage)
dim(minwage)          # give you the sample size and the number of variables
glimpse(minwage)
# Number of location in the file
minwage %>%
count(location)
# Create the variable state - two way to do it
minwage <-
mutate(minwage, state = if_else(location == "PA", "PA", "NJ"))
minwage <-
mutate(minwage, state1 = str_sub(location, -2L))
minwage
# Let's confirm that the state follow the law
nj_minwage <- 5.05        # You do this to avoid what is called the magic number
summarize(minwage)
policy <-
minwage %>%
mutate(pol_bef = if_else((wageBefore < nj_minwage), 1, 0),
pol_aft = if_else((wageAfter < nj_minwage), 1, 0)) %>%
group_by(state) %>%
summarise(prop_after = mean(pol_aft),
prop_before = mean(pol_bef))
policy
# but simply like this
minwage %>%
group_by(state) %>%
summarise(prop_after = mean(wageAfter < nj_minwage),
prop_before = mean(wageBefore < nj_minwage))
# tapply((minwage$wageAfter < minwage$nj_minwage), minwage$state, mean)
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
spread(full_prop_by_state, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
spread(full_prop_by_state, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
# spread(full_prop_by_state, state, fullPropAfter) %>%
#  mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
# Is the proportion full time higher in NJ after
# Computation of the main outcome
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
# Average proportion of full time for each state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
# Difference between NJ and PA - two ways to do it
# spread(full_prop_by_state, state, fullPropAfter) %>%
#  mutate(diff = NJ - PA)
diff1 <- filter(full_prop_by_state, state == "NJ")[["fullPropAfter"]] - filter(full_prop_by_state, state == "PA")[["fullPropAfter"]]
#diff1
## Subclassification
## Proportion of each fast-food chain in each state
prop_chain <-
minwage %>%
group_by(state) %>%
count(chain) %>%
mutate(prop_chain = n/sum(n))
prop_chain
## Why not put this information in a graph? Let's see
ggplot(prop_chain, aes(x = chain, y = prop_chain, color = state)) +
geom_point() +
coord_flip()                                                        # to flip x and y ascis
## Effect by chain
full_prop_by_state_chain <-
minwage %>%
group_by(state, chain) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state_chain
spread(full_prop_by_state_chain, state, fullPropAfter) %>%
mutate(diff = NJ - PA)
# Here also, we can compute the difference
ggplot(full_prop_by_state_chain, aes(x = chain, y = fullPropAfter, color = state)) +
geom_point() +
coord_flip()
## Before-and-after
minwage <-
minwage %>%
mutate(fullPropBefore = fullBefore / (fullBefore + partBefore))
minwage %>%
filter(state == "NJ") %>%
summarise(diff_bef_aft_NJ = mean(fullPropAfter) - mean(fullPropBefore))
## Before-and-after
minwage <-
minwage %>%
mutate(fullPropBefore = fullBefore / (fullBefore + partBefore))
minwage %>%
filter(state == "NJ") %>%
summarise(PropBefore = mean(fullPropBefore),
PropAfter = mean(fullPropAfter),
diff_bef_aft_NJ = mean(fullPropAfter) - mean(fullPropBefore))
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore)) %>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore)) %>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))%>%
spread(state, diff) %>%
mutate(diff_in_diff = NJ - PA)
getwd()
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
head(dhs_ipv)
summary(dhs_ipv)
ggplot(dhs_ipv) +
geom_bar(aes(x = no_media_cat, fill = beat_burnfood_cat), position = "dodge") +
ggtitle("Association entre ouverture aux médias et acceptation de la violence conjugale") +
xlab("Type de pays selon l'ouverture aux médias") +
ylab("Effectif") +
theme_bw()
knitr::include_graphics("factuel_contrafactuel.jpg")
getwd()
library(tidyverse)
library(summarytools)
dhs_ipv <- read_csv("dhs_ipv.csv")
dhs_ipv <-
dhs_ipv %>%
# select(beat_burnfood!= "NA") %>%
mutate(beat_burnfood_cat = factor(ntile(beat_burnfood, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
beat_goesout_cat = factor(ntile(beat_goesout, 4), labels = c('Très faible', 'Faible', 'Élevé', 'Très élevé')),
no_media_cat = factor(ntile(no_media, 3), labels = c('Riche', 'Moyen', 'Pauvre')))
head(dhs_ipv)
knitr::include_graphics("SATE1.jpg")
knitr::include_graphics("minimum-wage.jpg")
knitr::include_graphics("endogeneite.jpg")
knitr::include_graphics("cross_sectional.jpg")
library(tidyverse)
library(summarytools)
data("resume", package = "qss")
data(package = "qss")
data(package = "tidyverse")
data(package = "dplyr")
data(package = "summarytools")
View(resume)
freq(resume$sex)
freq(resume$race)
freq(resume$call)
discrimination <- ctable(resume$race, resume$call)
discrimination
ctable(resume$race, resume$sex)
knitr::include_graphics("minimum-wage.jpg")
library(tidyverse)
library(summarytools)
data("minwage", package = "qss")
View(minwage)
head(minwage)
View(minwage)
minwage <-
minwage %>%
mutate(state = if_else(location == "PA", "PA", "NJ"))
View(minwage)
View(minwage)
# Calcul de la variable dépendante: proportion fulltime
minwage <-
minwage %>%
mutate(totalAfter = fullAfter + partAfter,
fullPropAfter = fullAfter / totalAfter)
View(minwage)
View(minwage)
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state
diff1 <- full_prop_by_state[[1, 2]] - full_prop_by_state[[2, 2]]
diff1
diff1 <- full_prop_by_state[1, 2] - full_prop_by_state[2, 2]
diff1
diff1 <- full_prop_by_state[[1, 2]] - full_prop_by_state[[2, 2]]
diff1
View(minwage)
pivot_wider(full_prop_by_state, names_from = state, values_from = fullPropAfter)
pivot_wider(full_prop_by_state, names_from = state, values_from = fullPropAfter) %>%
mutate(diff = NJ - PA)
View(minwage)
minwage %>%
group_by(state) %>%
count(chain)
prop_chain <-
minwage %>%
group_by(state) %>%
count(chain) %>%
mutate(prop_chain = n/sum(n))
prop_chain
full_prop_by_state_chain <-
minwage %>%
group_by(state, chain) %>%
summarise(fullPropAfter = mean(fullPropAfter))
full_prop_by_state_chain
pivot_wider(full_prop_by_state_chain, names_from = state, values_from = fullPropAfter) %>%
mutate(diff = NJ - PA)
full_prop_by_state_chain
ggplot(full_prop_by_state_chain) +
geom_point(aes(x = chain, y = fullPropAfter, color = state))
ggplot(full_prop_by_state_chain) +
geom_point(aes(x = chain, y = fullPropAfter, color = state)) +
coord_flip()
full_prop_by_state_chain
pivot_wider(full_prop_by_state_chain, names_from = state, values_from = fullPropAfter)
pivot_wider(full_prop_by_state_chain, names_from = state, values_from = fullPropAfter) %>%
mutate(diff = NJ - PA)
full_prop_by_state_chain
ggplot(full_prop_by_state_chain) +
geom_point(aes(x = chain, y = fullPropAfter, color = state)) +
coord_flip()
minwage <-
minwage %>%
mutate(fullPropBefore = fullBefore / (fullBefore + partBefore))
View(minwage)
avant_apres <-
minwage %>%
filter(state == "NJ") %>%
summarise(PropBefore = mean(fullPropBefore),
PropAfter = mean(fullPropAfter),
diff_bef_aft_NJ = mean(fullPropAfter) - mean(fullPropBefore))
avant_apres
did <-
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))
did
did$diff[1] - did$diff[2]
did_direct <-
minwage %>%
group_by(state) %>%
summarise(diff = mean(fullPropAfter) - mean(fullPropBefore))%>%
pivot_wider(names_from =state, values_from = diff) %>%
mutate(diff_in_diff = NJ - PA)
did_direct
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise_at(vars(fullPropAfter, fullPropBefore), mean) %>%
pivot_longer(cols = c("fullPropAfter", "fullPropBefore"), names_to = "period", values_to = "fullProp") %>%
mutate(period = recode(period, fullPropAfter = 1, fullPropBefore = 0))
full_prop_by_state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise_at(vars(fullPropAfter, fullPropBefore), mean) %>%
pivot_longer(cols = c("fullPropAfter", "fullPropBefore"), names_to = "period", values_to = "fullProp")
full_prop_by_state
full_prop_by_state <-
minwage %>%
group_by(state) %>%
summarise_at(vars(fullPropAfter, fullPropBefore), mean) %>%
pivot_longer(cols = c("fullPropAfter", "fullPropBefore"), names_to = "period", values_to = "fullProp") %>%
mutate(period = recode(period, fullPropAfter = 1, fullPropBefore = 0))
full_prop_by_state
ggplot(full_prop_by_state) +
geom_point(aes(x = period, y = fullProp, color = state)) +
geom_line(aes(x = period, y = fullProp, color = state)) +
scale_x_continuous(breaks = c(0, 1), labels = c("Before", "After"))
?scale_x_continuous()
?summarise_at()
knitr::include_graphics("../Images/cancer1.png")
knitr::include_graphics("../Image/factuel_contrafactuel.jpg")
knitr::include_graphics("../Image/factuel_contrafactuel.jpg")
knitr::include_graphics("../Images/factuel_contrafactuel.jpg")
data("resume", package = "qss")
# resume <- read_csv("resume.csv")        # What you will do to import the data (remember your directory)
head(resume)
freq(resume$sex)
library(tidyverse)
library(summarytools)
freq(resume$sex)
freq(resume$race)
freq(resume$call)
ctable(resume$race, resume$call)
ctable(resume$race, resume$sex)
knitr::include_graphics("../Images/SATE1.jpg")
knitr::include_graphics("../Images/cancer2.png")
<iframe width="560" height="315" src="https://www.youtube.com/embed/eGRd8jBdNYg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
knitr::include_graphics(".../Images/cross_sectional.jpg")
knitr::include_graphics("../Images/confounding.jpg")
knitr::include_graphics(".../Images/cross_sectional.jpg")
knitr::include_graphics(".../Images/Before-After.jpg")
knitr::include_graphics(".../Images/cross_sectional.jpeg")
knitr::include_graphics("../Images/cross_sectional.jpg")
knitr::include_graphics("../Images/Before-After.jpg")
knitr::include_graphics("../Images/validity.jpg")
knitr::include_graphics("../Images/validity2.jpg")
